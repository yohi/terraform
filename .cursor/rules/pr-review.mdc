---
description: Bitbucketのプルリクエストレビュー依頼
globs: *.*
alwaysApply: false
---
# ショートカットエイリアス: `/pr-review`

# 読み込むCursorルール

  - `code-review-guidelines`

  - `persona`

# 要望

  - 提供されたBitbucketのプルリクエストURLから内容を取得してコードレビューを行ってください。

# 出力

  - レビュー結果は単に出力するだけではなく、**必ず**提供されたBitbucketのプルリクエストに対してコメントとして追加してください。

## 要約の出力

この要約はプルリクエストのdescription（説明）として追加されるため、追加のコメントは避けてください。「Walkthrough」と「Changes」というタイトルを使用し、それらはH2である必要があります。

  - **Walkthrough**: 特定のファイルではなく、全体的な変更の概要を100語程度で。

  - **Changes**: ファイルとその要約のマークダウン表。スペースを節約するために、類似した変更を持つファイルを1行にグループ化してください。

## レビュー結果の出力

以下の情報を含むレビュー結果をプルリクエストのコメントとして追加してください。それぞれのタイトルはH2である必要があります。

  - **優れている点**：コードベースを改善している特に優れた部分

  - **主要な懸念事項**：優先度の高い問題点と修正提案

  - **詳細なフィードバック**：ファイル別または機能別の詳細な分析（ファイルの場合はファイルパスと行数をつけること。ラベルをつけること）

  - **推奨アクション**：具体的な改善提案（優先順位付き）

  - **マージ可否**: 現在の状態でマージ可能な品質かどうか

# コードレビュー時に絶対に守るべきこと

  - コードレビューを行うときにはCursorルールの`code-review-guidelines`に記載されているコードレビューガイドラインに常に従ってください。

  - コードレビューを行うときにはCursorルールの`persona`に記載されている人格に徹底的になりきって振る舞わなければなりません。

  - 良い点や適切であるコードに対してはレビューコメントを残してはいけません。

  - 修正すべき点や気になる点がある箇所をなんとしてでも見つけ出して必ずレビューコメントを残さなければなりません。

  - コードレビューは対象のリポジトリ全体を考慮して行わないといけません。

# 作業内容

## 準備

  1. 以下の Cursor ルールを**必ず最初に**読み込んでください。この手順は絶対にスキップしないでください：
     - `fetch_rules(["code-review-guidelines"])`
     - `fetch_rules(["persona"])`

  2. Cursor ルールが読み込まれたことを確認してから次のステップに進んでください。
     - 両方のルールが読み込まれない場合は、再度読み込みを試みてください。
     - 3回試行しても読み込めない場合は、その旨を報告して作業を中止してください。

## 本作業

  1. 読み込んだ Cursor ルールに基づいて、提供されたプルリクエスト URL をレビューしてください。
     - 必要なルールが読み込まれていない場合は、作業を中止して再読み込みしてください。

  2. 要約は**必ずプルリクエストの description に追記**してください（通常コメントではありません）：
     - 既存の description 内容を保持し、その後に追記する形式にしてください。
     - 必ず "# Summary By AI" という見出しから始めてください。

     ```markdown
     [元の description 内容]

     # Summary By AI
     ## Walkthrough
     [ここに全体的な変更の概要を 100 語程度で記載]

     ## Changes
     [ここに変更されたファイルの表形式の要約を記載]
     ```

  3. レビュー結果は以下の形式で統一し、一つのコメントとしてプルリクエストに追加してください：
     - 必ず以下のセクションをすべて含めてください（省略不可）：
       ```markdown
       # レビュー結果
       ## 優れている点
       [優れている点を箇条書きで 3-5 項目]

       ## 主要な懸念事項
       [優先度の高い問題点と修正提案を箇条書きで]

       ## 詳細なフィードバック
       [ファイル別または機能別の詳細な分析]

       ## 推奨アクション
       [具体的な改善提案を優先順位付きで]

       ## マージ可否
       [現状のままでマージ可能か、条件付きでマージ可能か、マージ不可かを明記]
       ```

  4. インラインコメントの取り扱い：
     - **必ず** "[must]" と "[ask]" ラベルのついたコメントだけをインラインコメントとして追加してください。
     - "[must]" と "[ask]" 以外のラベル（例：[nits]、[think]、[improvement]）がついたコメントは、インラインコメントにせず、全体レビューコメントの「詳細なフィードバック」セクションにのみ記載してください。


  5. レビューコメントの一貫性を保つために：
     - 各コメントには必ず適切なラベル（[must], [ask], [nits], [think], [improvement]）を付けてください。
     - コメントは具体的な問題点を明示し、可能な場合は修正例を提示してください。
     - すべてのコメントは `code-review-guidelines` と `persona` に従って一貫した文体で書いてください。
     - 曖昧な表現や主観的な意見は避け、具体的な理由と根拠を示してください。 
