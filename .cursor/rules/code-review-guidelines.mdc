---
description: コードレビューガイドライン
globs: *.*
alwaysApply: false
---

# LLM向け コードレビューガイドライン（Googleエンジニアリングプラクティスに基づく）

このガイドラインは、Googleのエンジニアリングプラクティス文書から抜粋された情報に基づき、LLMがコードレビュー（Googleの用語ではChangeList: CL のレビュー）を行う際に考慮すべき一般的な観点をまとめたものです。コードレビューの主な目的は、コードベース全体の健康状態を継続的に改善することです。レビュアーは、開発者がタスクを進められるように配慮しつつも、CLの品質を確認する責任があります。

以下の観点に重点を置いてレビューを実施してください。

## 一般的なコードレビュー観点

レビュー対象のコード（CL）について、以下の観点を確認します:

*   **設計 (Design)**:
    *   CLの全体的な設計は適切か。
    *   CLのコード各部分は相互に適切に連携するか。
    *   この変更はコードベースまたは特定のライブラリに適切に属しているか。
    *   システムの他の部分とうまく統合するか。
    *   この機能を追加するタイミングは今が適切か。

*   **機能性 (Functionality)**:
    *   コードは開発者の意図通りに動作するか。
    *   このコードのユーザー（エンドユーザーおよび将来このコードを使う開発者）にとって挙動は適切か。
    *   エッジケースや並行処理の問題など、不具合がないかコードを読むだけでなく検討する。
    *   特にUIの変更や並行プログラミングが含まれる場合、注意深く確認し、必要であれば検証が許容される。

*   **複雑性 (Complexity)**:
    *   コードが必要以上に複雑になっていないか。行ごと、関数ごと、クラスごとなど、あらゆるレベルで確認する。
    *   「複雑すぎる」とは、コードを読んですぐに理解できない、あるいは開発者が呼び出しや修正時に不具合を生み出す可能性を意味する。
    *   **オーバーエンジニアリング**（必要以上の一般化や、現在不要な機能の盛り込み）に特に警戒する。
    *   開発者には、将来必要になるかもしれない推測に基づいた問題ではなく、**現在**解決する必要のある既知の問題に取り組むよう勧める。

*   **テスト (Tests)**:
    *   変更に適したユニットテスト、結合テスト、E2Eテストが追加されているか。
    *   テストは正確で、適切で、有用であるか。
    *   テストコード自体も保守すべきコードであり、複雑にしない。
    *   テストが壊れているときにきちんと失敗するか、変更によって誤検知を起こさないか確認する。
    *   各テストはシンプルで有用なアサーションを使っているか。
    *   テストは異なるテストメソッドごとに適切に分割されているか。
    *   一般に、テストはプロダクションコードと同じCLに追加されているか（緊急事態は例外）。

*   **命名 (Naming)**:
    *   変数名、クラス名、メソッド名など、あらゆるものに適切な名前が与えられているか。
    *   適切な名前は、それが何であるか／何をするかを伝えるのに十分な長さで、読むのに困難を覚えない短いものである。

*   **コメント (Comments)**:
    *   開発者はわかりやすい言葉で明確なコメントを書いているか。
    *   すべてのコメントは実際に必要か。
    *   コメントは普通、コードが**「なぜ」**存在するのかを説明するのに役立つべきであり、コードが**「何」**をしているのかを説明すべきではない。コード自体が説明するほど明確でない場合は、コードをシンプルにするよう勧める。
    *   古いコメントで削除すべきものや、変更の意図と矛盾するものがないか確認する。
    *   コメントはクラス、モジュール、関数のドキュメンテーションとは異なる。

*   **スタイル (Style)**:
    *   適切なスタイルガイドに準拠しているか。
    *   スタイルガイドに記載のない細かい指摘（nitpick）については、コメントに「Nit:」のようなプレフィックスを付けて、修正は強制ではないことを伝える。
    *   個人的なスタイルの好みでCLの提出をブロックしない。
    *   CL作成者がスタイル上の大きな変更を他の機能変更などに混ぜていないか確認する。大きなスタイル変更は別のCLとして分離するよう勧める。

*   **ドキュメンテーション (Documentation)**:
    *   CLがコードのビルド、テスト、相互連携、リリースのやり方を変更する場合、関連するドキュメンテーション（README, g3docページ, 自動生成されたリファレンスドキュメントなど）も更新されているか確認する。
    *   コードが削除された場合、関連ドキュメンテーションも削除すべきか検討する。
    *   ドキュメンテーションが存在しない場合は、作成するよう依頼する。

## その他の重要な考慮事項

*   **コードの健康状態の改善 (Improving Code Health)**:
    *   CLがシステムのコードの全体的な健康状態を**改善する**ことを確実に確認する。
    *   コードの健康状態を**悪化させる**CLは受け入れない（緊急事態を除く）。
    *   完璧さを求めすぎず、**継続的な改善**を追求する。多少不完全でもコードの健康状態を改善するCLは積極的に承認する。
    *   コードの品質改善はスモールステップで行われる。改善提案は粘り強く勧めるべき場合もある。

*   **CLのサイズ (CL Size)**:
    *   CLが単一の自己完結的な変更であるか確認する。
    *   小さくシンプルなCLは、レビューの速さ、隅々までのレビュー、バグ混入の可能性減少、マージの容易さなど、多くの利点がある。
    *   大きすぎるCLはレビューが困難になる。大きすぎる場合は、開発者に小さなCLに分割するよう依頼することを検討する。
    *   リファクタリングは機能変更やバグ修正と別のCLにするのが通常ベスト。

*   **CLディスクリプション (CL Description)**:
    *   CLディスクリプションは、「何」が変更され、「なぜ」変更されたのかを明確に説明しているか。
    *   一行目の要約が、何を行っているのかを短く、完全な文で、命令形で記述しているか。
    *   主要部に、解決される問題、最良の方法である理由、欠陥、関連情報（バグ番号、ベンチマーク、設計ドキュメントへのリンク等）が含まれているか。
    *   「Fix bug」「Add patch」のような情報量不足のディスクリプションではないか。適切なディスクリプションの例を参考にする。

*   **一行ずつの確認 (Line-by-Line Review)**:
    *   可能な限り、CLのコードを**一行ずつ**確認する。データファイルや自動生成コードはざっと見るだけでよい場合もあるが、人間の書いたコードはそうではない。
    *   コードが読みにくく、理解できない場合は、開発者にコードを明確にするよう依頼する。他の開発者も理解できない可能性が高いため、コードの理解しやすさを改善することは重要。

*   **コンテキストの確認 (Checking Context)**:
    *   CLの変更が、ファイル全体やシステム全体の広いコンテキストの中でどのように影響するかを理解する。
    *   小さな変更でもシステム全体の複雑性を増したり、テスト不足にしたりしないか確認する。

*   **良い点の称賛 (Praise Good Things)**:
    *   CLの中に素晴らしい点があれば、開発者に伝える。特にレビューコメントに対応して良い結果を出した場合にそうする。間違いだけでなく、良い実践も励ます。

## 用語の説明

*   **CL**: 「changelist」の略。一つの独立した変更を意味し、バージョン管理に提出されたものや、まだコードレビュー中のものを指す。他組織では「変更」「パッチ」とよく呼ばれる。
*   **LGTM**: 「Looks Good to Me」という意味。コードレビュアーがCLを承認するときに使う表現。
